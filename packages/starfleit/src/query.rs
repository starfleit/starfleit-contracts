// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `query.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct QueryDenomTraceRequest {
    // message fields
    pub hash: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryDenomTraceRequest {
    fn default() -> &'a QueryDenomTraceRequest {
        <QueryDenomTraceRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryDenomTraceRequest {
    pub fn new() -> QueryDenomTraceRequest {
        ::std::default::Default::default()
    }

    // string hash = 1;


    pub fn get_hash(&self) -> &str {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::string::String) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::string::String {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hash, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryDenomTraceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hash.is_empty() {
            os.write_string(1, &self.hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryDenomTraceRequest {
        QueryDenomTraceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hash",
                |m: &QueryDenomTraceRequest| { &m.hash },
                |m: &mut QueryDenomTraceRequest| { &mut m.hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryDenomTraceRequest>(
                "QueryDenomTraceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryDenomTraceRequest {
        static instance: ::protobuf::rt::LazyV2<QueryDenomTraceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryDenomTraceRequest::new)
    }
}

impl ::protobuf::Clear for QueryDenomTraceRequest {
    fn clear(&mut self) {
        self.hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryDenomTraceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDenomTraceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DenomTrace {
    // message fields
    pub path: ::std::string::String,
    pub base_denom: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DenomTrace {
    fn default() -> &'a DenomTrace {
        <DenomTrace as ::protobuf::Message>::default_instance()
    }
}

impl DenomTrace {
    pub fn new() -> DenomTrace {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // string base_denom = 2;


    pub fn get_base_denom(&self) -> &str {
        &self.base_denom
    }
    pub fn clear_base_denom(&mut self) {
        self.base_denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_base_denom(&mut self, v: ::std::string::String) {
        self.base_denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_denom(&mut self) -> &mut ::std::string::String {
        &mut self.base_denom
    }

    // Take field
    pub fn take_base_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base_denom, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DenomTrace {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base_denom)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if !self.base_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.base_denom);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if !self.base_denom.is_empty() {
            os.write_string(2, &self.base_denom)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DenomTrace {
        DenomTrace::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &DenomTrace| { &m.path },
                |m: &mut DenomTrace| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "base_denom",
                |m: &DenomTrace| { &m.base_denom },
                |m: &mut DenomTrace| { &mut m.base_denom },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DenomTrace>(
                "DenomTrace",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DenomTrace {
        static instance: ::protobuf::rt::LazyV2<DenomTrace> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DenomTrace::new)
    }
}

impl ::protobuf::Clear for DenomTrace {
    fn clear(&mut self) {
        self.path.clear();
        self.base_denom.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DenomTrace {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DenomTrace {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryDenomTraceResponse {
    // message fields
    pub denom_trace: ::protobuf::SingularPtrField<DenomTrace>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryDenomTraceResponse {
    fn default() -> &'a QueryDenomTraceResponse {
        <QueryDenomTraceResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryDenomTraceResponse {
    pub fn new() -> QueryDenomTraceResponse {
        ::std::default::Default::default()
    }

    // .DenomTrace denom_trace = 1;


    pub fn get_denom_trace(&self) -> &DenomTrace {
        self.denom_trace.as_ref().unwrap_or_else(|| <DenomTrace as ::protobuf::Message>::default_instance())
    }
    pub fn clear_denom_trace(&mut self) {
        self.denom_trace.clear();
    }

    pub fn has_denom_trace(&self) -> bool {
        self.denom_trace.is_some()
    }

    // Param is passed by value, moved
    pub fn set_denom_trace(&mut self, v: DenomTrace) {
        self.denom_trace = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom_trace(&mut self) -> &mut DenomTrace {
        if self.denom_trace.is_none() {
            self.denom_trace.set_default();
        }
        self.denom_trace.as_mut().unwrap()
    }

    // Take field
    pub fn take_denom_trace(&mut self) -> DenomTrace {
        self.denom_trace.take().unwrap_or_else(|| DenomTrace::new())
    }
}

impl ::protobuf::Message for QueryDenomTraceResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.denom_trace {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.denom_trace)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.denom_trace.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.denom_trace.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryDenomTraceResponse {
        QueryDenomTraceResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DenomTrace>>(
                "denom_trace",
                |m: &QueryDenomTraceResponse| { &m.denom_trace },
                |m: &mut QueryDenomTraceResponse| { &mut m.denom_trace },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryDenomTraceResponse>(
                "QueryDenomTraceResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryDenomTraceResponse {
        static instance: ::protobuf::rt::LazyV2<QueryDenomTraceResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryDenomTraceResponse::new)
    }
}

impl ::protobuf::Clear for QueryDenomTraceResponse {
    fn clear(&mut self) {
        self.denom_trace.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryDenomTraceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDenomTraceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QuerySupplyOfRequest {
    // message fields
    pub denom: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QuerySupplyOfRequest {
    fn default() -> &'a QuerySupplyOfRequest {
        <QuerySupplyOfRequest as ::protobuf::Message>::default_instance()
    }
}

impl QuerySupplyOfRequest {
    pub fn new() -> QuerySupplyOfRequest {
        ::std::default::Default::default()
    }

    // string denom = 1;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QuerySupplyOfRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QuerySupplyOfRequest {
        QuerySupplyOfRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "denom",
                |m: &QuerySupplyOfRequest| { &m.denom },
                |m: &mut QuerySupplyOfRequest| { &mut m.denom },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QuerySupplyOfRequest>(
                "QuerySupplyOfRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QuerySupplyOfRequest {
        static instance: ::protobuf::rt::LazyV2<QuerySupplyOfRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QuerySupplyOfRequest::new)
    }
}

impl ::protobuf::Clear for QuerySupplyOfRequest {
    fn clear(&mut self) {
        self.denom.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QuerySupplyOfRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QuerySupplyOfRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QuerySupplyOfResponse {
    // message fields
    pub amount: ::protobuf::SingularPtrField<Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QuerySupplyOfResponse {
    fn default() -> &'a QuerySupplyOfResponse {
        <QuerySupplyOfResponse as ::protobuf::Message>::default_instance()
    }
}

impl QuerySupplyOfResponse {
    pub fn new() -> QuerySupplyOfResponse {
        ::std::default::Default::default()
    }

    // .Coin amount = 1;


    pub fn get_amount(&self) -> &Coin {
        self.amount.as_ref().unwrap_or_else(|| <Coin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: Coin) {
        self.amount = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut Coin {
        if self.amount.is_none() {
            self.amount.set_default();
        }
        self.amount.as_mut().unwrap()
    }

    // Take field
    pub fn take_amount(&mut self) -> Coin {
        self.amount.take().unwrap_or_else(|| Coin::new())
    }
}

impl ::protobuf::Message for QuerySupplyOfResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.amount.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.amount.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QuerySupplyOfResponse {
        QuerySupplyOfResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Coin>>(
                "amount",
                |m: &QuerySupplyOfResponse| { &m.amount },
                |m: &mut QuerySupplyOfResponse| { &mut m.amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QuerySupplyOfResponse>(
                "QuerySupplyOfResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QuerySupplyOfResponse {
        static instance: ::protobuf::rt::LazyV2<QuerySupplyOfResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QuerySupplyOfResponse::new)
    }
}

impl ::protobuf::Clear for QuerySupplyOfResponse {
    fn clear(&mut self) {
        self.amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QuerySupplyOfResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QuerySupplyOfResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Coin {
    // message fields
    pub denom: ::std::string::String,
    pub amount: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Coin {
    fn default() -> &'a Coin {
        <Coin as ::protobuf::Message>::default_instance()
    }
}

impl Coin {
    pub fn new() -> Coin {
        ::std::default::Default::default()
    }

    // string denom = 1;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }

    // string amount = 2;


    pub fn get_amount(&self) -> &str {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::std::string::String) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut ::std::string::String {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amount, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Coin {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.amount);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        if !self.amount.is_empty() {
            os.write_string(2, &self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Coin {
        Coin::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "denom",
                |m: &Coin| { &m.denom },
                |m: &mut Coin| { &mut m.denom },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "amount",
                |m: &Coin| { &m.amount },
                |m: &mut Coin| { &mut m.amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Coin>(
                "Coin",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Coin {
        static instance: ::protobuf::rt::LazyV2<Coin> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Coin::new)
    }
}

impl ::protobuf::Clear for Coin {
    fn clear(&mut self) {
        self.denom.clear();
        self.amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Coin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Coin {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bquery.proto\",\n\x16QueryDenomTraceRequest\x12\x12\n\x04hash\x18\
    \x01\x20\x01(\tR\x04hash\"?\n\nDenomTrace\x12\x12\n\x04path\x18\x01\x20\
    \x01(\tR\x04path\x12\x1d\n\nbase_denom\x18\x02\x20\x01(\tR\tbaseDenom\"G\
    \n\x17QueryDenomTraceResponse\x12,\n\x0bdenom_trace\x18\x01\x20\x01(\x0b\
    2\x0b.DenomTraceR\ndenomTrace\",\n\x14QuerySupplyOfRequest\x12\x14\n\x05\
    denom\x18\x01\x20\x01(\tR\x05denom\"6\n\x15QuerySupplyOfResponse\x12\x1d\
    \n\x06amount\x18\x01\x20\x01(\x0b2\x05.CoinR\x06amount\"4\n\x04Coin\x12\
    \x14\n\x05denom\x18\x01\x20\x01(\tR\x05denom\x12\x16\n\x06amount\x18\x02\
    \x20\x01(\tR\x06amountJ\xb3\x0c\n\x06\x12\x04\0\0-\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n]\n\x02\x04\0\x12\x04\x04\0\x07\x01\x1aQ\x20QueryDenom\
    TraceRequest\x20is\x20the\x20request\x20type\x20for\x20the\x20Query/Deno\
    mTrace\x20RPC\n\x20method\n\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x1e\nJ\n\
    \x04\x04\0\x02\0\x12\x03\x06\x02\x12\x1a=\x20hash\x20(in\x20hex\x20forma\
    t)\x20of\x20the\x20denomination\x20trace\x20information.\n\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\x06\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x06\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x06\x10\x11\n{\n\x02\x04\
    \x01\x12\x04\x0b\0\x11\x01\x1ao\x20DenomTrace\x20contains\x20the\x20base\
    \x20denomination\x20for\x20ICS20\x20fungible\x20tokens\x20and\x20the\n\
    \x20source\x20tracing\x20information\x20path.\n\n\n\n\x03\x04\x01\x01\
    \x12\x03\x0b\x08\x12\nu\n\x04\x04\x01\x02\0\x12\x03\x0e\x02\x12\x1ah\x20\
    path\x20defines\x20the\x20chain\x20of\x20port/channel\x20identifiers\x20\
    used\x20for\x20tracing\x20the\n\x20source\x20of\x20the\x20fungible\x20to\
    ken.\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0e\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03\x0e\t\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0e\
    \x10\x11\n?\n\x04\x04\x01\x02\x01\x12\x03\x10\x02\x18\x1a2\x20base\x20de\
    nomination\x20of\x20the\x20relayed\x20fungible\x20token.\n\n\x0c\n\x05\
    \x04\x01\x02\x01\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03\x10\t\x13\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x10\x16\x17\n\
    `\n\x02\x04\x02\x12\x04\x15\0\x18\x01\x1aT\x20QueryDenomTraceResponse\
    \x20is\x20the\x20response\x20type\x20for\x20the\x20Query/DenomTrace\x20R\
    PC\n\x20method.\n\n\n\n\x03\x04\x02\x01\x12\x03\x15\x08\x1f\nP\n\x04\x04\
    \x02\x02\0\x12\x03\x17\x02\x1d\x1aC\x20denom_trace\x20returns\x20the\x20\
    requested\x20denomination\x20trace\x20information.\n\n\x0c\n\x05\x04\x02\
    \x02\0\x06\x12\x03\x17\x02\x0c\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x17\
    \r\x18\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x17\x1b\x1c\nY\n\x02\x04\
    \x03\x12\x04\x1b\0\x1e\x01\x1aM\x20QuerySupplyOfRequest\x20is\x20the\x20\
    request\x20type\x20for\x20the\x20Query/SupplyOf\x20RPC\x20method.\n\n\n\
    \n\x03\x04\x03\x01\x12\x03\x1b\x08\x1c\n=\n\x04\x04\x03\x02\0\x12\x03\
    \x1d\x02\x13\x1a0\x20denom\x20is\x20the\x20coin\x20denom\x20to\x20query\
    \x20balances\x20for.\n\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x1d\x02\x08\
    \n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x1d\t\x0e\n\x0c\n\x05\x04\x03\x02\
    \0\x03\x12\x03\x1d\x11\x12\n[\n\x02\x04\x04\x12\x04!\0$\x01\x1aO\x20Quer\
    ySupplyOfResponse\x20is\x20the\x20response\x20type\x20for\x20the\x20Quer\
    y/SupplyOf\x20RPC\x20method.\n\n\n\n\x03\x04\x04\x01\x12\x03!\x08\x1d\n0\
    \n\x04\x04\x04\x02\0\x12\x03#\x02\x12\x1a#\x20amount\x20is\x20the\x20sup\
    ply\x20of\x20the\x20coin.\n\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03#\x02\
    \x06\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03#\x07\r\n\x0c\n\x05\x04\x04\
    \x02\0\x03\x12\x03#\x10\x11\n\xaf\x01\n\x02\x04\x05\x12\x04*\0-\x01\x1a\
    \xa2\x01\x20Coin\x20defines\x20a\x20token\x20with\x20a\x20denomination\
    \x20and\x20an\x20amount.\n\n\x20NOTE:\x20The\x20amount\x20field\x20is\
    \x20an\x20Int\x20which\x20implements\x20the\x20custom\x20method\n\x20sig\
    natures\x20required\x20by\x20gogoproto.\n\n\n\n\x03\x04\x05\x01\x12\x03*\
    \x08\x0c\n\x0b\n\x04\x04\x05\x02\0\x12\x03+\x02\x14\n\x0c\n\x05\x04\x05\
    \x02\0\x05\x12\x03+\x02\x08\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03+\t\x0e\
    \n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03+\x12\x13\n\x0b\n\x04\x04\x05\x02\
    \x01\x12\x03,\x02\x14\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03,\x02\x08\n\
    \x0c\n\x05\x04\x05\x02\x01\x01\x12\x03,\t\x0f\n\x0c\n\x05\x04\x05\x02\
    \x01\x03\x12\x03,\x12\x13b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
